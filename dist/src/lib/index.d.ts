export { Beta } from './beta';
export { Binomial } from './binomial';
export { NegativeBinomial } from './binomial-negative';
export { Cauchy } from './cauchy';
export { chebyshev_eval, chebyshev_init } from './chebyshev';
export { ChiSquared } from './chi-2';
export { Exponential } from './exp';
export { FDist } from './f-distro';
export { Gamma } from './gamma';
export { Geometric } from './geometric';
export { HyperGeometric } from './hypergeometric';
export { Logistic } from './logis';
export { LogNormal } from './lognormal';
export { Multinomial, IdmultinomOptions } from './multinom';
export { Normal } from './normal';
export { Poisson } from './poisson';
export { rng, IRNG, IRNGNormal } from './rng';
export { SignRank } from './signrank';
export { StudentT } from './student-t';
export { Tukey } from './tukey';
export { Uniform } from './uniform';
export { Weibull } from './weibull';
export { Wilcoxon } from './wilcoxon';
export { hypot, log1p as log1pR } from './log';
export declare const special: Readonly<{
    besselJ: typeof import("./bessel/besselJ").bessel_j;
    besselY: typeof import("./bessel/besselY").bessel_y;
    besselK: typeof import("./bessel/besselK").bessel_k;
    besselI: typeof import("./bessel/besselI").bessel_i;
    choose: typeof import("./common/choose").internal_choose;
    lchoose: typeof import("./common/choose").internal_lchoose;
    lfastchoose: typeof import("./common/choose").lfastchoose;
    lfastchoose2: typeof import("./common/choose").lfastchoose2;
    beta: typeof import("./beta/beta").beta;
    lbeta: typeof import("./beta/lbeta").lbeta;
    digamma: typeof import("./gamma/polygamma").digamma;
    gamma: typeof import("./gamma/gamma_fn").gammafn;
    lgamma: typeof import("./gamma/lgammafn_sign").lgammafn_sign;
    pentagamma: typeof import("./gamma/polygamma").pentagamma;
    psigamma: typeof import("./gamma/polygamma").psigamma;
    tetragamma: typeof import("./gamma/polygamma").tetragamma;
    trigamma: typeof import("./gamma/polygamma").trigamma;
}>;
import { array_flatten, chain, flatten, ISummary, multiplexer, numberPrecision, Rcycle, seq_len, strTypes } from './r-func';
export { ISummary, strTypes };
export declare const utils: {
    numberPrecision: typeof numberPrecision;
    multiplexer: typeof multiplexer;
    Rcycle: typeof Rcycle;
    flatten: typeof flatten;
    array_flatten: typeof array_flatten;
    seq_len: typeof seq_len;
    sequenceFactory: (adjust?: number, adjustMin?: number) => (start: number, end: number, delta?: number) => number[];
    seq1: (start: number, end: number, delta?: number) => number[];
    seq0: (start: number, end: number, delta?: number) => number[];
    chain: typeof chain;
    combine: (...args: any[]) => {}[];
    c: (...args: any[]) => {}[];
};
